"use client";
'use strict';

var _tslib = require('../_virtual/_tslib.js');
var React = require('react');
var charts = require('./charts.js');
var Bar = require('../external/recharts/es6/cartesian/Bar.js');
var BarChart$1 = require('../external/recharts/es6/chart/BarChart.js');

var BarChart = React.forwardRef(function BarChart(_a, ref) {
    var categories = _a.categories, _b = _a.colors, colors = _b === void 0 ? charts.DEFAULT_COLORS : _b, dark = _a.dark, data = _a.data, index = _a.index, stacked = _a.stacked, _c = _a.gridLines, gridLines = _c === void 0 ? React.createElement(charts.CartesianGrid, null) : _c, _d = _a.xAxis, xAxis = _d === void 0 ? React.createElement(charts.XAxis, { dataKey: index }) : _d, _e = _a.yAxis, yAxis = _e === void 0 ? React.createElement(charts.YAxis, null) : _e, _f = _a.tooltip, tooltip = _f === void 0 ? React.createElement(charts.ChartTooltip, { cursor: { fill: "#D1D5DB", opacity: "0.15" } }) : _f, _g = _a.legend, legend = _g === void 0 ? React.createElement(charts.ChartLegend, null) : _g, _h = _a.children, children = _h === void 0 ? categories.map(function (category, index) {
        var color = colors[index % colors.length];
        return (React.createElement(Bar.Bar, { key: index, dataKey: category, fill: color, stackId: stacked ? "a" : undefined, isAnimationActive: false }));
    }) : _h, layout = _a.layout, syncId = _a.syncId, margin = _a.margin, barCategoryGap = _a.barCategoryGap, barGap = _a.barGap, barSize = _a.barSize, maxBarSize = _a.maxBarSize, stackOffset = _a.stackOffset, reverseStackOrder = _a.reverseStackOrder, otherProps = _tslib.__rest(_a, ["categories", "colors", "dark", "data", "index", "stacked", "gridLines", "xAxis", "yAxis", "tooltip", "legend", "children", "layout", "syncId", "margin", "barCategoryGap", "barGap", "barSize", "maxBarSize", "stackOffset", "reverseStackOrder"]);
    return (React.createElement(charts.ChartContextProvider, { categories: categories, colors: colors, dark: dark },
        React.createElement(charts.AutoSizedChartWrapper, _tslib.__assign({ ref: ref }, otherProps), function (_a) {
            var height = _a.height, width = _a.width;
            return (React.createElement(BarChart$1.BarChart, { data: data, height: height, width: width, layout: layout, syncId: syncId, margin: margin, barCategoryGap: barCategoryGap, barGap: barGap, barSize: barSize, maxBarSize: maxBarSize, stackOffset: stackOffset, reverseStackOrder: reverseStackOrder },
                gridLines,
                xAxis,
                yAxis,
                tooltip,
                legend,
                children));
        })));
});

exports.BarChart = BarChart;
