"use client";
'use strict';

var _tslib = require('../_virtual/_tslib.js');
var index = require('../external/classnames/index.js');
var React = require('react');
var charts = require('./charts.js');
var lineChart_module = require('./line-chart.module.css.js');
var Line = require('../external/recharts/es6/cartesian/Line.js');
var Dot = require('../external/recharts/es6/shape/Dot.js');
var LineChart$1 = require('../external/recharts/es6/chart/LineChart.js');

var LineChart = React.forwardRef(function LineChart(_a, ref) {
    var categories = _a.categories, _b = _a.colors, colors = _b === void 0 ? charts.DEFAULT_COLORS : _b, dark = _a.dark, data = _a.data, index$1 = _a.index, _c = _a.gridLines, gridLines = _c === void 0 ? React.createElement(charts.CartesianGrid, null) : _c, _d = _a.xAxis, xAxis = _d === void 0 ? React.createElement(charts.XAxis, { dataKey: index$1 }) : _d, _e = _a.yAxis, yAxis = _e === void 0 ? React.createElement(charts.YAxis, null) : _e, _f = _a.tooltip, tooltip = _f === void 0 ? React.createElement(charts.ChartTooltip, null) : _f, _g = _a.legend, legend = _g === void 0 ? React.createElement(charts.ChartLegend, null) : _g, _h = _a.children, children = _h === void 0 ? categories.map(function (category, index$1) {
        var color = colors[index$1 % colors.length];
        return (React.createElement(Line.Line, { key: index$1, type: "monotone", activeDot: function (props) {
                var _a;
                return (React.createElement(Dot.Dot, _tslib.__assign({ className: index(lineChart_module.dot, (_a = {}, _a[lineChart_module.dark] = dark, _a)), r: 5, style: { fill: color } }, props)));
            }, dot: false, dataKey: category, fill: color, isAnimationActive: false, stroke: color, strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2 }));
    }) : _h, layout = _a.layout, syncId = _a.syncId, margin = _a.margin, otherProps = _tslib.__rest(_a, ["categories", "colors", "dark", "data", "index", "gridLines", "xAxis", "yAxis", "tooltip", "legend", "children", "layout", "syncId", "margin"]);
    return (React.createElement(charts.ChartContextProvider, { categories: categories, colors: colors, dark: dark },
        React.createElement(charts.AutoSizedChartWrapper, _tslib.__assign({ ref: ref }, otherProps), function (_a) {
            var height = _a.height, width = _a.width;
            return (React.createElement(LineChart$1.LineChart, { data: data, height: height, width: width, layout: layout, syncId: syncId, margin: margin },
                gridLines,
                xAxis,
                yAxis,
                tooltip,
                legend,
                children));
        })));
});

exports.LineChart = LineChart;
