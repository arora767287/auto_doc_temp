"use client";
import { __rest, __assign } from '../_virtual/_tslib.js';
import classNames from '../external/classnames/index.js';
import * as React from 'react';
import AutoSizer from '../external/react-virtualized-auto-sizer/dist/react-virtualized-auto-sizer.esm.js';
import styles from './charts.module.css.js';
import { XAxis as XAxis$1 } from '../external/recharts/es6/cartesian/XAxis.js';
import { YAxis as YAxis$1 } from '../external/recharts/es6/cartesian/YAxis.js';
import { Tooltip } from '../external/recharts/es6/component/Tooltip.js';
import { Legend } from '../external/recharts/es6/component/Legend.js';
import { Label } from '../external/recharts/es6/component/Label.js';
import { CartesianGrid as CartesianGrid$1 } from '../external/recharts/es6/cartesian/CartesianGrid.js';

/**
 * Colors
 */
/* Default palette is Blue */
var DEFAULT_COLORS = ["3b82f6", "bfdbfe", "2563eb", "93c5fd", "1d4ed8", "60a5fa"];
function createColorMap(_a) {
    var categories = _a.categories, colors = _a.colors;
    var colorMap = new Map();
    for (var i = 0; i < categories.length; i++) {
        colorMap.set(categories[i], colors[i % colors.length]);
    }
    return colorMap;
}
var ChartContext = React.createContext(undefined);
function ChartContextProvider(_a) {
    var categories = _a.categories, colors = _a.colors, dark = _a.dark, children = _a.children;
    var value = React.useMemo(function () { return ({ colorMap: createColorMap({ categories: categories, colors: colors }), dark: dark }); }, [categories, colors, dark]);
    return React.createElement(ChartContext.Provider, { value: value }, children);
}
function useChartContext() {
    return React.useContext(ChartContext);
}
var AutoSizedChartWrapper = React.forwardRef(function AutoSizedChartWrapper(_a, ref) {
    var className = _a.className, style = _a.style, children = _a.children, props = __rest(_a, ["className", "style", "children"]);
    return (React.createElement("div", __assign({ className: classNames(className, styles.root), ref: ref }, props, { style: __assign(__assign({}, style), { minHeight: 200, minWidth: 300 }) }),
        React.createElement(AutoSizer, null, function (_a) {
            var height = _a.height, width = _a.width;
            return children({ height: height, width: width });
        })));
});
/**
 * Recharts Wrappers
 */
var ChartLabel = Label;
var CartesianGrid = function (_a) {
    var _b;
    var ref = _a.ref, className = _a.className, _c = _a.horizontal, horizontal = _c === void 0 ? true : _c, _d = _a.vertical, vertical = _d === void 0 ? false : _d, _e = _a.strokeWidth, strokeWidth = _e === void 0 ? 1 : _e, otherProps = __rest(_a, ["ref", "className", "horizontal", "vertical", "strokeWidth"]);
    var dark = useChartContext().dark;
    return (React.createElement(CartesianGrid$1, __assign({ className: classNames(className, styles.grid, (_b = {}, _b[styles.dark] = dark, _b)), horizontal: horizontal, vertical: vertical, strokeWidth: strokeWidth, ref: ref }, otherProps)));
};
CartesianGrid.displayName = CartesianGrid$1.displayName;
var XAxis = function (_a) {
    var ref = _a.ref, otherProps = __rest(_a, ["ref"]);
    return React.createElement(XAxis$1, __assign({ ref: ref }, otherProps));
};
XAxis.displayName = XAxis$1.displayName;
XAxis.defaultProps = __assign(__assign({}, XAxis$1.defaultProps), { axisLine: false, tickLine: false, padding: { left: 20, right: 20 }, interval: "equidistantPreserveStart" });
var YAxis = function (_a) {
    var ref = _a.ref, otherProps = __rest(_a, ["ref"]);
    return React.createElement(YAxis$1, __assign({ ref: ref }, otherProps));
};
YAxis.displayName = YAxis$1.displayName;
YAxis.defaultProps = __assign(__assign({}, YAxis$1.defaultProps), { axisLine: false, tickLine: false, width: 40 });
function DefaultTooltip(_a) {
    var _b;
    var active = _a.active, colorMap = _a.colorMap, dark = _a.dark, payload = _a.payload, label = _a.label;
    if (active && payload && payload.length) {
        return (React.createElement("div", { className: classNames(styles.tooltip, (_b = {}, _b[styles.dark] = dark, _b)) },
            label ? React.createElement("div", null, label) : null,
            payload.map(function (_a, index) {
                var name = _a.name, value = _a.value;
                return (React.createElement("div", { className: styles.row, key: index },
                    React.createElement("span", { className: styles.dot, style: { backgroundColor: colorMap.get(String(name)) } }),
                    React.createElement("span", { className: styles.name }, name !== null && name !== void 0 ? name : ""),
                    React.createElement("span", { className: styles.value }, value)));
            })));
    }
    return null;
}
var ChartTooltip = function (props) {
    var _a = useChartContext(), colorMap = _a.colorMap, dark = _a.dark;
    return (React.createElement(Tooltip, __assign({ content: function (_a) {
            var active = _a.active, payload = _a.payload, label = _a.label;
            return (React.createElement(DefaultTooltip, { active: active, colorMap: colorMap, dark: dark, label: label, payload: payload }));
        } }, props)));
};
ChartTooltip.displayName = Tooltip.displayName;
ChartTooltip.defaultProps = __assign(__assign({}, Tooltip.defaultProps), { cursor: { stroke: "#D1D5DB", strokeWidth: 1 }, isAnimationActive: false });
function DefaultLegend(_a) {
    var _b;
    var align = _a.align, colorMap = _a.colorMap, dark = _a.dark, payload = _a.payload;
    return (React.createElement("div", { className: classNames(styles.legend, (_b = {},
            _b[styles.dark] = dark,
            _b[styles.left] = align === "left",
            _b[styles.center] = align === "center",
            _b[styles.right] = align === "right",
            _b)) }, payload.map(function (_a, index) {
        var value = _a.value;
        return (React.createElement("div", { className: styles.row, key: index },
            React.createElement("span", { className: styles.dot, style: { backgroundColor: colorMap.get(String(value)) } }),
            React.createElement("span", { className: styles.name }, value)));
    })));
}
var ChartLegend = function (_a) {
    var ref = _a.ref, otherProps = __rest(_a, ["ref"]);
    var _b = useChartContext(), colorMap = _b.colorMap, dark = _b.dark;
    return (React.createElement(Legend, __assign({ content: function (_a) {
            var payload = _a.payload;
            return (React.createElement(DefaultLegend, { align: otherProps.align, colorMap: colorMap, dark: dark, payload: payload }));
        }, ref: ref }, otherProps)));
};
ChartLegend.displayName = Legend.displayName;
ChartLegend.defaultProps = __assign(__assign({}, Legend.defaultProps), { align: "right", verticalAlign: "top" });

export { AutoSizedChartWrapper, CartesianGrid, ChartContextProvider, ChartLabel, ChartLegend, ChartTooltip, DEFAULT_COLORS, XAxis, YAxis, createColorMap, useChartContext };
